[
  {
    "_id": "66e9dde63c14661b52cb7af7",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\" /\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n    \u003ctitle\u003eHow to Get and Set Browser URL in Javascript\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\" /\u003e\n\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface\u0026family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /\u003e\n    \u003clink\n      href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;400;500;700\u0026display=swap\"\n      rel=\"stylesheet\"\n    /\u003e\n    \u003clink\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css\"\n  /\u003e\n  \u003c/head\u003e\n\n  \u003cstyle\u003e\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  \u003c/style\u003e\n\n  \u003cbody\u003e\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n      \u003cdiv\u003e\n        \u003c!-- ** Introduction --\u003e\n        \u003cdiv class=\"topic-holder\"\u003e\n          \u003ch1 class=\"topic\"\u003eIntroduction\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Javascript's \u003cspan class=\"folder\"\u003ewindow\u003c/span\u003e object gives you access to manipulate or control the web brower,\n            this is called\n            \u003cstrong class=\"important-text\"\u003eBrower Control\u003c/strong\u003e. In this\n            article you'll learn how to get the browers current Uniform Resourse\n            Location (URL) and change it to what ever you want using\n            Javascript.\n          \u003c/p\u003e\n        \u003c/div\u003e\n      \u003c/div\u003e\n\n        \u003cdiv\u003e\n        \u003c!-- ** Introduction --\u003e\n            \u003cdiv class=\"topic-holder\"\u003e\n                \u003ch1 class=\"topic\"\u003eGetting the Brower Current URL\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n\n\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eTo get the current URL, call the \u003cspan class=\"folder\"\u003ehref\u003c/span\u003e method on the \u003cspan class=\"folder\"\u003ewindow.location\u003c/span\u003e object.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst currentURL = window.location.href\nconsole.log(currentURL)     \u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                  \n            \u003c/div\u003e\n                \n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eNote that the \u003cspan class=\"folder\"\u003ehref\u003c/span\u003e method will get you the full URL. But you can get the URL in pieces by calling other methods on the \u003cspan class=\"folder\"\u003ewindow.location\u003c/span\u003e object.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eUse the \u003cspan class=\"folder\"\u003epathname\u003c/span\u003e method to get only the current path.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst currentPath = window.location.pathname\nconsole.log(currentPath)\n                        \u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                \n\n                \u003cp class=\"paragraph\"\u003eUse the \u003cspan class=\"folder\"\u003ehostname\u003c/span\u003e method to get only the domain or site name.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst domainName = window.location.hostname\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n\n                \n                  \u003cp class=\"paragraph\"\u003eIf the URL includes an \u003cstrong class=\"important-text\"\u003eAnchor\u003c/strong\u003e pointing to a section of the page, use the \u003cspan class=\"folder\"\u003ehash\u003c/span\u003e method to get it.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003econst theAnchor = window.location.hash\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n                \n            \u003c/div\u003e\n\n        \u003c/div\u003e\n\n\n        \u003cdiv\u003e\n            \u003c!-- ** Introduction --\u003e\n            \u003cdiv class=\"topic-holder\"\u003e\n                \u003ch1 class=\"topic\"\u003eSetting the Brower Current URL\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eAs metioned earlier, you can also tell the browser to navigate to a different destination or URL path.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003ewindow.location.href = \"www.google.com/search\"\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cp class=\"paragraph\"\u003eThe above code will navigate your brower to google's search page.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eBelow is a common use case for redirecting your browser to a different page on your current website.\u003c/p\u003e\n\n                \u003cdiv class=\"code-snippet\"\u003e\n                    \u003cdiv class=\"code-header\"\u003eJAVASCRIPT\u003c/div\u003e\n                    \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\u003ccode class=\"code javascript\"\u003evar currentSite = window.location.hostname;\nvar destination = \"http://\" + currentSite + \"/another-page\";\nwindow.location.href = destination;\u003c/code\u003e\u003c/pre\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n\n            \u003c/div\u003e\n        \u003c/div\u003e\n\n    \u003c/section\u003e\n\n\n\n\n\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript src=\"path/to/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"path/to/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript\u003e\n      hljs.highlightAll();\n    \u003c/script\u003e\n    \u003cscript\u003e\n      hljs.initLineNumbersOnLoad();\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e",
    "category": "javascript",
    "date": "July 8, 2024",
    "img": "https://www.computerhope.com/jargon/j/javascript.png",
    "imgalt": "js-logo",
    "imgsource": "computerhope.com",
    "number": 1,
    "readduration": "5",
    "smallbody": "Learn how to get the browser's current URL and change it to whatever you want using Javascript.",
    "tags": ["javascirpt", "web-dev"],
    "title": "How to Get and Set Browser URL in Javascript",
    "views": 1
  },
  {
    "_id": "66e9de353c14661b52cb7af9",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eCreate A Mongodb Cluster and Create A Connection String\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n\n    \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Acme\u0026display=swap\"/\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\"/\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Acme\u0026family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\"/\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface\u0026family=Acme\u0026display=swap\"/\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\"\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin\u003e\n    \u003clink href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;400;500;700\u0026display=swap\" rel=\"stylesheet\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n\n        \u003c!-- ** Introduction --\u003e\n\n        \u003carticle\u003e\n            \u003cdiv class=\"header\"\u003e\n                \u003ch3 class=\"topic\"\u003eIntroduction\u003c/h3\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eCreating a Mongo Database Cluster is the first step to working with mongodb. This article will take you through a step by step guide on how to create a free mongo database in the mongodb official website and generate a \u003cstrong class=\"important-text\"\u003eDatabase Connection URL\u003c/strong\u003e.\u003c/p\u003e\n\n                \u003cblockquote class=\"definition\"\u003e\n                    \u003cp class=\"quote-paragraph\"\u003eA Database Connection URL is a string that your DBMS JDBC driver uses to connect to a database. It can contain information such as where to search for the database, the name of the database to connect to, and configuration properties.\u003c/p\u003e\n                    \u003cp class=\"ref\"\u003eref: \u003ca target=\"_blank\" href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html#:~:text=A%20database%20connection%20URL%20is,connect%20to%2C%20and%20configuration%20properties.\" \u003edocs.oracle.com\u003c/a\u003e\u003c/p\u003e\n                \u003c/blockquote\u003e\n            \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n\n\n\n        \u003c!-- ** Introduction --\u003e\n         \u003carticle\u003e\n             \u003cdiv class=\"header\"\u003e\n                \u003ch3 class=\"topic\"\u003eCreate a Free Mongodb Atlas Account\u003c/h3\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n             \u003cp class=\"paragraph\"\u003eTo use mongodb, you'll need a free \u003cstrong class=\"important-text\"\u003eMongoDB Atlas Account\u003c/strong\u003e. Follow the following steps to do so:\u003c/p\u003e\n                 \u003cdiv class=\"list-holder paragraph\"\u003e\n                     \u003c!--** Ordered List --\u003e\n                     \u003col\u003e\n                         \u003c!-- ** Item 1 --\u003e\n                         \u003cli class=\"list\"\u003e Head to the \u003ca target=\"_blank\" href=\"https://cloud.mongodb.com/\" class=\"blog-link\"\u003emongodb official website\u003c/a\u003e\u003c/li\u003e\n                         \u003cli class=\"list\"\u003e Click on \"try free\" to sign up\u003c/li\u003e\n                         \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture.jpg?raw=true\"\u003e\n                             \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture.jpg?raw=true\" alt=\"mongodb\" class=\"img\"\u003e\n                         \u003c/a\u003e\n                         \u003cli class=\"list\"\u003eFill the form that follows to create a free Mongodb Atlas Account\u003c/li\u003e\n                         \u003cli class=\"list\"\u003eVerify your email account and sign in using your set email and passoword\u003c/li\u003e\n                     \u003c/ol\u003e\n                 \u003c/div\u003e\n             \u003c/div\u003e\n         \u003c/article\u003e\n\n\n\n\n\n        \n        \u003c!-- ** Introduction --\u003e\n         \u003carticle\u003e\n             \u003cdiv class=\"header\"\u003e\n                 \u003ch3 class=\"topic\"\u003eCreate a Database\u003c/h3\u003e\n                 \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n             \u003c/div\u003e\n             \n             \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture2.jpg?raw=true\"\u003e\n                 \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture2.jpg?raw=true\" alt=\"mongodb\" class=\"img\"\u003e\n             \u003c/a\u003e\n             \u003cdiv class=\"paragraphs-holder\"\u003e\n                 \u003cp class=\"paragraph\"\u003eNotice the \"project menu\" at top-left coner. Every Mongodb Database must be in a project. Mongodb creates a default project ( \u003cstrong class=\"important-text\"\u003e'project 0'\u003c/strong\u003e ), but you can create as many projects as you want by clicking on the project menu. We'll be using the default for now. \u003c/p\u003e\n                 \u003cp class=\"paragraph\"\u003eNow lets create your first Database:\u003c/p\u003e\n     \n                 \u003cdiv class=\"list-holder paragraph\"\u003e\n                     \u003c!--** Ordered List --\u003e\n                     \u003col\u003e\n                         \u003c!-- ** Item 1 --\u003e\n                         \u003cli class=\"list\"\u003eClick on \"Build a Database\"\u003c/li\u003e\n                         \u003cli class=\"list\"\u003eChoose a deployment option\u003c/li\u003e\n                         \u003cp class=\"paragraph\"\u003eAny of the deployment option will work for this tutorial, but I'll recommend starting out with the free Shared option for learning and exploring MongoDB in a sandbox environment..\u003c/p\u003e\n                         \u003cli class=\"list\"\u003eAdditional Information\u003c/li\u003e\n                         \u003cp class=\"paragraph\"\u003eYou can provide addition information about your Database Cluster, such as Cloud Provider \u0026 Region, Cluster Tier etc. I have left every option as default except for the Cluster Name which I've changed to \u003cstrong class=\"important-text\"\u003eTutorial-cluster\u003c/strong\u003e\u003c/p\u003e\n                         \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/4.jpg?raw=true\"\u003e\n                             \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/4.jpg?raw=true\" alt=\"mongodb website\" class=\"img\"\u003e\n                         \u003c/a\u003e\n                         \u003cli class=\"list\"\u003eClick \"Create Cluster\"\u003c/li\u003e\n                         \u003cli class=\"list\"\u003eSecurity Quickstart Options\u003c/li\u003e\n                         \u003cp\u003eTo access data stored in Atlas, you'll need to create users and set up network security controls.\u003c/p\u003e\n                         \u003cp\u003eChoose Username and Password as your authentication method and create a user\u003c/p\u003e\n                         \u003cp\u003eChoose My Local Environment as your network access method and click \"Add My Current IP Address\" to give connection access to your current device \u003c/p\u003e\n                         \u003cp\u003eClick \"finish and close\"\u003c/p\u003e\n                         \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture5.jpg?raw=true\"\u003e\n                             \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture5.jpg?raw=true\" alt=\"mongodb website\" class=\"img\"\u003e\n                         \u003c/a\u003e\n                     \u003c/ol\u003e\n                 \u003c/div\u003e\n             \u003c/div\u003e\n         \u003c/article\u003e\n\n\n\n\n\n\n        \n        \u003c!-- ** Introduction --\u003e\n         \u003carticle\u003e\n            \n             \u003cdiv class=\"header\"\u003e\n                 \u003ch3 class=\"topic\"\u003eGenerate a Connection URL\u003c/h3\u003e\n                 \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n             \u003c/div\u003e\n             \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture6.jpg?raw=true\"\u003e\n                 \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture6.jpg?raw=true\" alt=\"mongodb website\" class=\"img\"\u003e\n             \u003c/a\u003e\n             \u003cdiv class=\"paragraphs-holder\"\u003e\n                 \u003cp class=\"paragraph\"\u003eNow our Database is created, we can now generate a Connection URL to connect to our Database \u003c/p\u003e\n                 \u003cdiv class=\"list-holder paragraph\"\u003e\n                     \u003c!--** Ordered List --\u003e\n                     \u003col\u003e\n                         \u003cli class=\"paragraph\"\u003eStart by clicking on the \"connection\" button shown in the above image\u003c/li\u003e\n                         \u003cli class=\"paragraph\"\u003eNext, choose a connection method that suit your use case ( for this tutorial we'll use 'connect your application' )\u003c/li\u003e\n                         \u003cli class=\"paragraph\"\u003eChoose the \u003cstrong class=\"important-text\"\u003edriver\u003c/strong\u003e and \u003cstrong class=\"important-text\"\u003eversion\u003c/strong\u003e you're working with and your \u003cstrong class=\"important-text\"\u003econnection string\u003c/strong\u003e will be generated for you\u003c/li\u003e\n                         \n                     \u003c/ol\u003e\n                     \u003ca target=\"_blank\" href=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture7.jpg?raw=true\"\u003e\n                         \u003cimg src=\"https://github.com/daniel-idoko/blog-images/blob/main/15-12-22%20Create%20A%20Mongodb%20Cluster%20and%20Create%20A%20Connection%20String/Capture7.jpg?raw=true\" alt=\"mongodb website\" class=\"img\"\u003e\n                     \u003c/a\u003e\n                     \u003cp class=\"paragraph\"\u003eDon't forget to replace the \u003cstrong class=\"important-text\"\u003e \u0026lt;password\u0026gt; \u003c/strong\u003e param with your Mongodb Atlas Account password\u003c/p\u003e\n                 \u003c/div\u003e\n                 \n             \u003c/div\u003e\n         \u003c/article\u003e\n    \u003c/section\u003e\n\n\n\n\u003c/body\u003e\n\u003c/html\u003e",
    "category": "guide",
    "date": "July 18, 2024",
    "img": "https://webimages.mongodb.com/_com_assets/cms/kuzt9r42or1fxvlq2-Meta_Generic.png",
    "imgalt": "mongodb",
    "imgsource": "mongodb.com",
    "number": 2,
    "readduration": "30",
    "smallbody": "How to create a free mongodb atlas account and generate a Database Connection URL.",
    "tags": ["mongodb", "database", "backend"],
    "title": "Create A Mongodb Cluster and Create A Database Connection URL",
    "views": 2
  },
  {
    "_id": "66e9de443c14661b52cb7afa",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\n    \u003cmeta charset=\"UTF-8\" /\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n    \u003ctitle\u003eCRUD operations with Mongodb GoLang Driver\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\" /\u003e\n\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Acme\u0026family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\"\n    /\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css2?family=Abril+Fatface\u0026family=Acme\u0026display=swap\"\n    /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin /\u003e\n    \u003clink\n      href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@200;400;500;700\u0026display=swap\"\n      rel=\"stylesheet\"\n    /\u003e\n    \u003c!-- \u003clink href=\"https://{{cdn}}/prismjs@v1.x/themes/prism.css\" rel=\"stylesheet\" /\u003e --\u003e\n    \u003c!-- \u003clink href=\"prism.css\" rel=\"stylesheet\" type=\"text/css\" /\u003e --\u003e\n    \u003clink\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css\"\n    /\u003e\n  \u003c/head\u003e\n  \u003cstyle\u003e\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  \u003c/style\u003e\n  \u003cbody\u003e\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n\n      \n      \u003c!-- ** Introduction --\u003e\n      \u003carticle\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch3 class=\"topic\"\u003eIntroduction\u003c/h3\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n    \n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003e\n            Mongodb is classified as a JSON-like, document oriented database programme. It\n              is the leading NoSQL database. While Golang\n              is a statically typed, compiled programming language designed at\n              Google. It is built to be simple, high-performing, readable, and\n              efficient.\n            \u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003e\n              CRUD operations with mongodb golang driver covers how to manage and perform various API - CRUD operations on a\n              mongodb database using the mongodb golang driver. This will include:\n              \u003ca href=\"#\" class=\"blog-link\"\u003ecreating\u003c/a\u003e,\n              \u003ca href=\"#\" class=\"blog-link\"\u003ereading\u003c/a\u003e,\n              \u003ca href=\"#\" class=\"blog-link\"\u003eupdating\u003c/a\u003e, and\n              \u003ca href=\"#\" class=\"blog-link\"\u003edeleting\u003c/a\u003e documents from a\n              mongo database.\n            \u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003e\n              This tutorial is a pratical one, which means we'll be learning by\n              bulding a project. We'll be building the backend of a\n              \u003cstrong class=\"important-text\"\u003e'Photo Gallary App'\u003c/strong\u003e that allow\n              users to save their photos, delete photos, view photos at will, and am\n              sure you get the point.\n            \u003c/p\u003e\n          \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n      \n      \u003carticle\u003e\n        \u003c!-- ** Prerequisites --\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch3 class=\"topic\"\u003ePrerequisites\u003c/h3\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n  \n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003eTo follow this tutorial, you will need:\u003c/p\u003e\n          \u003cdiv class=\"list-holder paragraph\"\u003e\n            \u003cul\u003e\n              \u003cli class=\"list-item\"\u003e\n                Golang installed on you system, which you can get install from the\n                \u003ca target=\"_blank\" href=\"https://go.dev\" class=\"blog-link\"\n                  \u003eGo offical website\u003c/a\n                \u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003e\n                Mongodb Database Connection URL, which you can easily generate by\n                following this blog,\n                \u003ca target=\"_blank\" href=\"/blog/66e9de353c14661b52cb7af9\" class=\"blog-link\"\n                  \u003eCreate A Mongodb Cluster and Generate A Connection String\n                  URL\u003c/a\n                \u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003e\n                Familiarity with the concept of a\n                \u003ca target=\"_blank\" href=\"https://www.techtarget.com/searchdatamanagement/definition/database\" class=\"blog-link\"\u003eData Base\u003c/a\u003e\n              \u003c/li\u003e\n              \u003cli class=\"list-item\"\u003eBasic knowlege of Golang programming.\u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n      \u003c!-- ** Install External Packages --\u003e\n      \u003carticle\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch1 class=\"topic\"\u003eInstall External Packages\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            In this section we will be installing all the external packages needed\n            to build this project. We'll do this by executing a series of\n            termitnal commands.\n          \u003c/p\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Create a new directory for this project and create a\n            \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file inside it.\n          \u003c/p\u003e\n          \u003cdiv class=\"list-holder paragraph\"\u003e\n            \u003c!--** Ordered List --\u003e\n            \u003col\u003e\n              \u003c!-- ** Item 1 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Initialising our project into a\n                  \u003cstrong class=\"important-text\"\u003e'module'\u003c/strong\u003e\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Before we start installing the packages we need for this project,\n                open a terminal window pointing to you project directory and\n                execute the following command:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go mod init \"gallary-app\"\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003e\n                This should create a new\n                \u003cstrong class=\"folder\"\u003ego.mod\u003c/strong\u003e file in your project\n                directory\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"md-2\"\u003e\u003c/div\u003e\n  \n              \u003c!-- ** Item 2 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Install golang's gorilla/mux package\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Gorilla/mux is a popular external go package, used to create HTTP routers for go\n                applications.\n              \u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Run the following terminal command in your project directory to\n                install Gorilla/mux:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go get -u github.com/gorilla/mux\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n  \n              \u003cdiv class=\"md-2\"\u003e\u003c/div\u003e\n  \n              \u003c!-- ** Item 3 --\u003e\n              \u003cli\u003e\n                \u003cstrong class=\"important-sentence\"\u003e\n                  Install the mongodb golang driver\u003c/strong\n                \u003e\n              \u003c/li\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Now let install the most important external package we will be\n                needing for this application.\n              \u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003e\n                Run the following terminal command in your project directory to\n                install Go's mongodb driver:\n              \u003c/p\u003e\n  \n              \u003cdiv class=\"code-snippet\"\u003e\n                \u003cdiv class=\"code-header\"\u003eterminal\u003c/div\u003e\n                \u003cdiv class=\"code-body\"\u003e\n                  \u003cpre class=\"code\"\u003e\u003e go get go.mongodb.org/mongo-driver/mongo\u003c/pre\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n            \u003c/ol\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n\n      \u003carticle\u003e\n\n        \u003c!-- ** Create Router and Start Server --\u003e\n        \u003cdiv  class=\"header\"\u003e\n          \u003ch1 class=\"topic\"\u003eCreate Router Using Gorilla/mux\u003c/h1\u003e\n          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n  \n        \u003cdiv class=\"paragraphs-holder\"\u003e\n          \u003cp class=\"paragraph\"\u003e\n            Head to the \u003cstrong class=\"folder\"\u003emain.go\u003c/strong\u003e file and start by\n            creating a \u003cstrong class=\"folder\"\u003erouter\u003c/strong\u003e for this project\n            using the Gorilla/mux package we installed earlier. Our router will be handling the following \u003cspan class=\"folder\"\u003eHTTP\u003c/span\u003e request:\n          \u003c/p\u003e\n          \u003cdiv class=\"table-container\"\u003e\n            \u003ctable class=\"table\"\u003e\n              \u003ctr\u003e\n                  \u003cthead\u003e\n                      \u003cth class=\"th\"\u003eRoute\u003c/th\u003e\n                      \u003cth class=\"th\"\u003eRequest Method\u003c/th\u003e\n                      \u003cth class=\"th\"\u003eHandler Function\u003c/th\u003e\n                  \u003c/thead\u003e\n                  \u003ctbody\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/get-photos\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGET\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGetAllPhotos\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/get-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGET\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eGetPhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/create-photo\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003ePOST\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eCreatePhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003c!-- \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/update-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003ePUT\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eUpdatePhoto\u003c/td\u003e\n                      \u003c/tr\u003e --\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/delete-photo/{id}\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDELETE\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDeletePhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                      \u003ctr\u003e\n                          \u003ctd class=\"td\"\u003e\"/delete-photos\"\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDELETE\u003c/td\u003e\n                          \u003ctd class=\"td\"\u003eDeleteAllPhoto\u003c/td\u003e\n                      \u003c/tr\u003e\n                  \u003c/tbody\u003e\n              \u003c/tr\u003e\n            \u003c/table\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n  \n  \n        \u003cp class=\"paragraph\"\u003eFirst import the gorilla/mux package, then create a new \u003cspan class=\"folder\"\u003erouter\u003c/span\u003e using the \u003cspan class=\"folder\"\u003emux.NewRouter()\u003c/span\u003e function. Finally, create 5 \u003cspan class=\"folder\"\u003erouter.HandleFunc()\u003c/span\u003e function to handle each request.\u003c/p\u003e\n        \u003cp class=\"paragraph\"\u003eThis is what your \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file should look like:\u003c/p\u003e\n  \n        \u003cdiv class=\"code-snippet\"\u003e\n          \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n          \u003cdiv class=\"code-body\"\u003e\n            \u003cpre class=\"pre\"\u003e\n                        \u003ccode class=\"code go\"\u003epackage main\n  \nimport (\n  \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\n    router := mux.NewRouter()\n        \n    router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n    router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n    router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n    router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n    router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n    router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n          \u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n          \n          \u003c!-- ** Create Router and Start Server --\u003e\n          \u003cdiv  class=\"header\"\u003e\n              \u003ch1 class=\"topic\"\u003eStart Listening for HTTP Server Request\u003c/h1\u003e\n              \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n              \u003cp class=\"paragraph\"\u003eNext, start listening for server request on port \u003cspan class=\"folder\"\u003e8080\u003c/span\u003e using the \u003cspan class=\"folder\"\u003ehttp.ListenAndServe()\u003c/span\u003e function from the \u003cstrong class=\"important-text\"\u003e\"net/http\"\u003c/strong\u003e package in the \u003ca href=\"https://pkg.go.dev/std\" class=\"blog-link\" target=\"_blank\"\u003eGo standard library\u003c/a\u003e. The function take two arguments: \u003cspan class=\"folder\"\u003eport number\u003c/span\u003e and \u003cspan class=\"folder\"\u003ehttp handler function\u003c/span\u003e, and it returns one value of type \u003cspan class=\"folder\"\u003eerror\u003c/span\u003e, which we'll use to check for any errors.\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e...\n  \nfmt.Println(\"starting server on port 8080\")\nserverErr := http.ListenAndServe(\":8080\", router)\nif serverErr != nil {\n    panic(serverErr)\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003eMake sure you import the \"net/http\" package.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \u003carticle\u003e\n\n                      \u003c!-- ** Connection to Mongodb --\u003e\n                      \u003cdiv  class=\"header\"\u003e\n                          \u003ch1 class=\"topic\"\u003eConnect To Mongodb\u003c/h1\u003e\n                          \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n                      \u003c/div\u003e\n            \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003e\n                    To connect to Mongodb, you need to create a \n                    \u003ca target=\"_blank\" class=\"blog-link\" href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/connecting.html#:~:text=A%20database%20connection%20URL%20is,connect%20to%2C%20and%20configuration%20properties.\"\u003e\u003cstrong class=\"important-text\"\u003eConnection String URL\u003c/strong\u003e\u003c/a\u003e using\n                    this format below and store in a \u003cstrong class=\"folder\"\u003evariable\u003c/strong\u003e.\n                    \u003cdiv class=\"code-snippet\"\u003e\n                      \u003cdiv class=\"code-header\"\u003etxt\u003c/div\u003e\n                      \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\n                              \u003ccode class=\"code txt\"\u003emongodb+srv://[username]:[password]@[cluster_name].wvunv.mongodb.net/[database]?retryWrites=true\u0026w=majority\u003c/code\u003e\u003c/pre\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e \n                  \u003c/p\u003e\n                  \u003cp class=\"paragraph\"\u003eYou can also\n                      generate a\n                      \u003cstrong class=\"important-text\"\u003econnect string URL\u003c/strong\u003e by\n                    following this article,\n                    \u003ca target=\"_blank\" href=\"/blog/66e9de353c14661b52cb7af9\" class=\"blog-link\"\n                      \u003eCreate A Mongodb Cluster and Generate A Connection String URL\u003c/a\n                    \u003e.\u003c/p\u003e\n                    \n                    \u003cp class=\"paragraph\"\u003eNext, create \u003cspan class=\"folder\"\u003econtext\u003c/span\u003e using the \u003cspan class=\"folder\"\u003econtext.WithTimeout()\u003c/span\u003e function from the Go standard library.\u003c/p\u003e\n                    \u003cblockquote class=\"definition\"\u003e\n                        \u003cp class=\"quote-paragraph\"\u003e\n                            \u003cstrong class=\"important-text\"\u003eContext\u003c/strong\u003e is a standard\n                            package of Golang that makes it easy to pass request-scoped values,\n                          cancelation signals, and deadlines across API boundaries to all the\n                          goroutines involved in handling a request.\n                        \u003c/p\u003e\n                        \u003cp class=\"ref\"\u003e\n                          ref:\n                          \u003ca\n                          target=\"_blank\"\n                          class=\"blog-link\"\n                            href=\"https://www.educative.io/answers/golang-context\"\n                            \u003eeducative.io\u003c/a\n                          \u003e\n                        \u003c/p\u003e\n                      \u003c/blockquote\u003e\n                    \u003cp class=\"paragraph\"\u003eParses your connection url using the \u003cspan class=\"folder\"\u003eoptions.Client().ApplyURI()\u003c/span\u003e function from the \u003cstrong class=\"important-text\"\u003e\"mongo-driver/mongo/options\"\u003c/strong\u003e package we installed earlier.\u003c/p\u003e\n                    \u003cp class=\"paragraph\"\u003eEstablish connection to the Mongodb using the \u003cspan class=\"folder\"\u003emongo.connect()\u003c/span\u003e function. \u003c/p\u003e\n                    \u003cp class=\"paragraph\"\u003eAt this point your \u003cspan class=\"folder\"\u003emain.go\u003c/span\u003e file should look like this:\u003c/p\u003e\n            \n                    \u003cdiv class=\"code-snippet\"\u003e\n                        \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                        \u003cdiv class=\"code-body\"\u003e\n                          \u003cpre class=\"pre\"\u003e\n                                \u003ccode class=\"code go\"\u003epackage main\n            \nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nvar Client *mongo.Client\n\nfunc main() {\n\n  router := mux.NewRouter()\n\n  connectionURL := \"mongodb+srv://daniel:my-secret-password@Tutorial-cluster.wvunv.mongodb.net/gallary-app?retryWrites=true\u0026w=majority\"\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  clientOption := options.Client().ApplyURI(connectionURL)\n\n  mongoClient, connectionError := mongo.Connect(ctx, clientOption)\n  if connectionError != nil {\n\n      panic(connectionError)\n\n  } else {\n      Client = mongoClient\n\n      // Start Listening for Server Request\n      fmt.Println(\"starting server on port 8080\")\n      errSever := http.ListenAndServe(\":8080\", router)\n      if errSever != nil {\n          panic(errSever)\n      }\n  }\n\n  \n  // Routes\n  router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n  router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n  router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n  router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n  router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n  router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n                        \u003c/div\u003e\n                      \u003c/div\u003e\n            \n                      \u003cp class=\"paragraph\"\u003eThe \u003cspan class=\"folder\"\u003emongo.connect()\u003c/span\u003e function returns two values: \u003cspan class=\"folder\"\u003emongoClient\u003c/span\u003e and \u003cspan class=\"folder\"\u003econnectionError\u003c/span\u003e. First we check for any connection error using the \u003cspan class=\"folder\"\u003econnectionError\u003c/span\u003e variable before proceeding.\u003c/p\u003e\n                      \u003cp class=\"paragraph\"\u003e\u003cspan class=\"folder\"\u003emongoClient\u003c/span\u003e is our \u003cspan class=\"important-text\"\u003econnection client\u003c/span\u003e to mongodb, we'll use this client to communicate to our mongodb, its why we store it in a globally decleared variable (\u003cspan class=\"folder\"\u003eClient\u003c/span\u003e) to make it accessible through out the application,\u003c/p\u003e\n                      \u003cp class=\"paragraph\"\u003eNotice we check for connection error before starting our server, now our server will only start running when we've connnected to mongodb.\u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          \u003carticle\u003e\n\n              \u003c!-- ** Make a post request --\u003e\n              \u003cdiv  class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eHandle a POST Request to Mongodb\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n              \u003c/div\u003e\n              \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003e\n                  Lets start by creating a function (\u003cspan class=\"folder\"\u003eCreatePhoto()\u003c/span\u003e) to handle posting a new photo to\n                  our database.\n                \u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eBefore creating the POST function, define a new \u003cspan class=\"folder\"\u003estruct\u003c/span\u003e that will represent the \u003cspan class=\"folder\"\u003emodel or schema\u003c/span\u003e for each Photo object we post to our mongo database.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eOn line 12, I've created a new struct called \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e. We'll use the struct to make post request to mongodb.\u003c/p\u003e\n                \u003cdiv class=\"code-snippet\"\u003e\n                  \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                  \u003cdiv class=\"code-body\"\u003e\n                    \u003cpre class=\"pre\"\u003e\n                          \u003ccode class=\"code go\"\u003eimport (\n  \"context\"\n  \"fmt\"\n  \"net/http\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype Photo struct {\n  PhotoNumber int       `json:\"photo_number\"`\n  Name        string    `json:\"name\"`\n  Image       byte      `json:\"photo\"`\n  Date        time.Time `json:\"date\"`\n}\n      \n      ...\u003c/code\u003e\u003c/pre\u003e\n                  \u003c/div\u003e\n                \u003c/div\u003e\n              \u003c/div\u003e\n    \n    \n              \u003cdiv class=\"paragraphs-holder\"\u003e\n                \u003cp class=\"paragraph\"\u003eNow lets create a new \u003cstrong\u003ehandler function\u003c/strong\u003e \u003cspan class=\"folder\"\u003eCreatePhoto\u003c/span\u003e. Below is the function that POST a new Photo to mongodb:\u003c/p\u003e\n                \n                \u003cdiv class=\"code-snippet\"\u003e\n                  \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                  \u003cdiv class=\"code-body\"\u003e\n                    \u003cpre class=\"pre\"\u003e\n                          \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\nfunc CreatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  var newPhoto Photo\n  json.NewDecoder(r.Body).Decode(\u0026newPhoto)\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.InsertOne(ctx, newPhoto)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n                  \u003c/div\u003e\n              \u003c/div\u003e\n              \u003cp class=\"paragraph\"\u003eIn our \u003cspan class=\"folder\"\u003eCreatePhoto\u003c/span\u003e function we start by setting our response \"content-type\" to json. Next we create a new variable of type \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e and decode the request body into it. On line 8, using your mongo client ( \u003cspan class=\"folder\"\u003eClient\u003c/span\u003e ) connect to the particular Database and Collection you want to store the item. Next create context.\u003c/p\u003e\n              \u003cp class=\"paragraph\"\u003eLastly, on line 13 we insert the item to mongodb by calling the \u003cspan class=\"folder\"\u003eInsertOne\u003c/span\u003e function on the mongo collection. the \u003cspan class=\"folder\"\u003emongo.InsertOne\u003c/span\u003e function takes our context and Photo object as its arguments and returns an insertion result and insertion error. First we check for any error, in absence of any error we encode the result back to the front end.\u003c/p\u003e\n            \u003c/div\u003e\n          \u003c/article\u003e\n        \n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!-- ** Make a post request --\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle a Get-All Request from Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003e\n              Below is handler function that gets all the items from our database.\n            \u003c/p\u003e\n          \u003c/div\u003e\n  \n          \u003cdiv class=\"code-snippet\"\u003e\n            \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n            \u003cdiv class=\"code-body\"\u003e\n              \u003cpre class=\"pre\"\u003e\n                    \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc GetAllPhotos(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  cursor, err := collection.Find(ctx, bson.M{})\n  if err != nil {\n    panic(err)\n  } else {\n    var allItems []bson.M\n    if err = cursor.All(ctx, \u0026allItems); err != nil {\n      panic(err)\n    } else {\n      json.NewEncoder(w).Encode(allItems)\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n            \u003c/div\u003e\n            \u003cp class=\"paragraph\"\u003eBe sure to import the \"go.mongodb.org/mongo-driver/bson\" from the mongo-driver we installed eailer\u003c/p\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eFirst we set our response content-type to json. Next we connect to the database collection we want to get our items from. Then create context for the get all quary.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eOn line 12 we call the \u003cspan class=\"folder\"\u003eFind\u003c/span\u003e function on our mongo collection. The function takes in context and a \u003cstrong class=\"important-text\"\u003efilter\u003c/strong\u003e as its arguments, in this case we've used the \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON\u003c/a\u003e type \u003cspan class=\"folder\"\u003ebson.M{}\u003c/span\u003e, this get us an unordered representation of a \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON\u003c/a\u003e doucment. Read more about the mongodb \u003ca href=\"https://www.mongodb.com/docs/drivers/go/current/fundamentals/bson/\" target=\"_blank\" class=\"blog-link\"\u003eBSON Data Types\u003c/a\u003e if you have a specific order you want to get your item, for example you might want to get only Photos from a particular date.\u003c/p\u003e\n            \u003cblockquote class=\"definition\"\u003e\n              \u003cp class=\"quote-paragraph\"\u003e\n                \u003cstrong class=\"important-text\"\u003eBSON\u003c/strong\u003e is a binary encoded Javascript Object Notation (JSON)—a textual object notation widely used to transmit and store data across web based applications. JSON is easier to understand as it is human-readable, but compared to BSON, it supports fewer data types. BSON encodes type and length information, too, making it easier for machines to parse.\n              \u003c/p\u003e\n            \u003c/blockquote\u003e\n            \n            \u003cp class=\"paragraph\"\u003eThe \u003cspan class=\"folder\"\u003eFind\u003c/span\u003e function returns a \u003cspan class=\"folder\"\u003emongo Cursor\u003c/span\u003e. Note that the cursor is not our document, it is only a pointer to our document.\n              On line 17 we access the data from the cursor by calling the \u003cspan class=\"folder\"\u003eAll\u003c/span\u003e function on it, which iterates the cursor and decodes each document into the \u003cspan class=\"folder\"\u003eallItems\u003c/span\u003e slice.\n            \u003c/p\u003e\n  \n            \u003cblockquote class=\"definition\"\u003e\n              \u003cp class=\"quote-paragraph\"\u003e\n                In MongoDB, when the find() method is used to find the documents present in the given collection, then this method returned a pointer which will points to the documents of the collection, now this pointer is known as \u003cstrong class=\"important-text\"\u003ecursor\u003c/strong\u003e. Or in other words we can say that a cursor is a pointer, and using this pointer we can access the document.\n              \u003c/p\u003e\n  \n              \u003cp class=\"ref\"\u003e\n                ref:\n                \u003ca\n                  target=\"_blank\"\n                  class=\"blog-link\"\n                  href=\"https://www.geeksforgeeks.org/mongodb-cursor/\"\n                  \u003egeeksforgeeks.org\u003c/a\n                \u003e\n              \u003c/p\u003e\n            \u003c/blockquote\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!-- ** Make a post request --\u003e\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle Get-One Request from Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eBelow is the \u003cspan class=\"folder\"\u003eGetPhoto\u003c/span\u003e function that will get one item from our Collection using its uniqe \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property in our \u003cstrong class=\"important-text\"\u003ePhoto struct\u003c/strong\u003e.\u003c/p\u003e\n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n  ...\n  \nfunc GetPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n  \n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n  \n  var photo Photo\n  err := collection.FindOne(ctx, Photo{PhotoNumber: id}).Decode(\u0026photo)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(photo)\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n  \n            \u003cp class=\"paragraph\"\u003eSet your content type to json, then get the \u003cspan class=\"folder\"\u003eid\u003c/span\u003e param from the url, then connect to your collection and  create context.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eNext, call the \u003cspan class=\"folder\"\u003eFindOne\u003c/span\u003e function on your mongo collection to get one item from your collection. The function take context and a filter as its arguments. In this case use the \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property as the filter. Decode the result of this function into a \u003cspan class=\"folder\"\u003ePhoto\u003c/span\u003e variable.\u003c/p\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \u003carticle\u003e\n\n          \u003c!--  --\u003e\n                  \u003cdiv  class=\"header\"\u003e\n                    \u003ch1 class=\"topic\"\u003eHandle DeleteOne Request to Mongodb\u003c/h1\u003e\n                    \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n                  \u003c/div\u003e\n                  \u003cdiv class=\"paragraphs-holder\"\u003e\n                    \u003cp class=\"paragraph\"\u003eTo delete an item from your collection, call the \u003cspan class=\"folder\"\u003eDeleteOne\u003c/span\u003e function on you mongo collection. The function takes context and  a filter as arguments. Like we did earlier use the \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property as the filter.\u003c/p\u003e\n          \n                    \u003cp class=\"paragraph\"\u003eBelow is the \u003cspan class=\"folder\"\u003eDeletePhoto\u003c/span\u003e function that will delete one item from our Collection using its uniqe \u003cspan class=\"folder\"\u003ePhotoNumber\u003c/span\u003e property in our \u003cstrong class=\"important-text\"\u003ePhoto struct\u003c/strong\u003e.\u003c/p\u003e\n          \n                    \u003cdiv class=\"code-snippet\"\u003e\n                      \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n                      \u003cdiv class=\"code-body\"\u003e\n                        \u003cpre class=\"pre\"\u003e\n                              \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc DeletePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteOne(ctx, Photo{PhotoNumber: id})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n            \u003c/code\u003e\u003c/pre\u003e\n                      \u003c/div\u003e\n                    \u003c/div\u003e\n                  \u003c/div\u003e\n        \u003c/article\u003e\n\n\n\n\n        \u003carticle\u003e\n\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle DeleteAll Request to Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eLet handle a request that empties our collection. To do this, call the \u003cspan class=\"folder\"\u003eDeleteMany\u003c/span\u003e function on your mongo collection. The function takes context and a filter as arguments. For the filter use the BSON type D. Since we're delete every item in the collection, we don't need to add any key to the filter.\u003c/p\u003e\n  \n            \u003cp class=\"paragraph\"\u003e\n              Below is the \u003cspan class=\"folder\"\u003eDeleteAllPhoto\u003c/span\u003e function that will delete all the items from our collection\n            \u003c/p\u003e\n  \n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n...\n\nfunc DeleteAllPhotosO(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteMany(ctx, bson.D{{}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n} \u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\n\n  \n        \u003carticle\u003e\n\n          \u003cdiv  class=\"header\"\u003e\n            \u003ch1 class=\"topic\"\u003eHandle Update Request to Mongodb\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cp class=\"paragraph\"\u003eIf you'd like to add an update feature to your project, I'll show  you how to do so in this section. You can update an item in your collection by calling the \u003cspan class=\"folder\"\u003eUpdateOne\u003c/span\u003e function on your mongo collection. The \u003cspan class=\"folder\"\u003eUpdateOne\u003c/span\u003e function take three arguments: context, a filter of the item you want to update, as well as what should be updated within the item.\u003c/p\u003e\n            \u003cp class=\"paragraph\"\u003eThe following code is an example of how to update an item in mongodb\u003c/p\u003e\n  \n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\"\u003e// Below we have our DATABASE QUERY FUNCTIONS\n  ...\n  \nfunc UpdatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.UpdateOne(ctx, Photo{PhotoNumber: 1}, bson.D{{\"name\", \"Undated Name\"}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n} \u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n  \n  \n          \u003cdiv class=\"topic-holder md-2\"\u003e\n            \u003ch1 class=\"topic\"\u003eComplete Project\u003c/h1\u003e\n            \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n          \u003c/div\u003e\n          \u003cdiv class=\"paragraphs-holder\"\u003e\n            \u003cdiv class=\"code-snippet\"\u003e\n              \u003cdiv class=\"code-header\"\u003emain.go\u003c/div\u003e\n              \u003cdiv class=\"code-body\"\u003e\n                \u003cpre class=\"pre\"\u003e\n                      \u003ccode class=\"code go\" style=\"max-height: 100%;\"\u003epackage main\n  \nimport (\n  \"context\"\n  \"encoding/json\"\n  \"fmt\"\n  \"net/http\"\n  \"strconv\"\n  \"time\"\n\n  \"github.com/gorilla/mux\"\n  \"go.mongodb.org/mongo-driver/bson\"\n  \"go.mongodb.org/mongo-driver/mongo\"\n  \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype Photo struct {\n  PhotoNumber int       `json:\"photo_number\"`\n  Name        string    `json:\"name\"`\n  Image       byte      `json:\"photo\"`\n  Date        time.Time `json:\"date\"`\n}\n\nvar Client *mongo.Client\n\n// Below we have our DATABASE QUERY FUNCTIONS\nfunc CreatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  var newPhoto Photo\n  json.NewDecoder(r.Body).Decode(\u0026newPhoto)\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.InsertOne(ctx, newPhoto)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc GetAllPhotos(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  cursor, err := collection.Find(ctx, bson.M{})\n  if err != nil {\n    panic(err)\n  } else {\n    var allItems []bson.M\n    if err = cursor.All(ctx, \u0026allItems); err != nil {\n      panic(err)\n    } else {\n      json.NewEncoder(w).Encode(allItems)\n    }\n  }\n}\n\nfunc GetPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  var photo Photo\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  err := collection.FindOne(ctx, Photo{PhotoNumber: id}).Decode(\u0026photo)\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(photo)\n  }\n}\n\nfunc DeletePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  // Get the id parameter\n  params := mux.Vars(r)\n  id, _ := strconv.Atoi(params[\"id\"])\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteOne(ctx, Photo{PhotoNumber: id})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc DeleteAllPhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.DeleteMany(ctx, bson.D{{}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc UpdatePhoto(w http.ResponseWriter, r *http.Request) {\n  w.Header().Set(\"content-type\", \"application/json\")\n\n  collection := Client.Database(\"my-database\").Collection(\"my-collection\")\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  result, err := collection.UpdateOne(ctx, Photo{PhotoNumber: 1}, bson.D{{\"name\", \"Undated Name\"}})\n  if err != nil {\n    panic(err)\n  } else {\n    json.NewEncoder(w).Encode(result)\n  }\n}\n\nfunc main() {\n\n  router := mux.NewRouter()\n\n  connectionURL := \"mongodb+srv://daniel:my-secret-password@Tutorial-cluster.wvunv.mongodb.net/gallary-app?retryWrites=true\u0026w=majority\"\n\n  ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n  defer cancel()\n\n  clientOption := options.Client().ApplyURI(connectionURL)\n\n  mongoClient, connectionError := mongo.Connect(ctx, clientOption)\n  if connectionError != nil {\n    panic(connectionError)\n  } else {\n    Client = mongoClient\n\n    // Start Listening for Server Request\n    fmt.Println(\"starting server on port 8080\")\n    errSever := http.ListenAndServe(\":8080\", router)\n    if errSever != nil {\n      panic(errSever)\n    }\n  }\n\n  // Routes\n  router.HandleFunc(\"/get-photos\", GetAllPhotos).Methods(\"GET\")\n  router.HandleFunc(\"/get-photo/{id}\", GetPhoto).Methods(\"GET\")\n  router.HandleFunc(\"/create-photo\", CreatePhoto).Methods(\"POST\")\n  router.HandleFunc(\"/update-photo/{id}\", UpdatePhoto).Methods(\"PUT\")\n  router.HandleFunc(\"/delete-photo/{id}\", DeletePhoto).Methods(\"DELETE\")\n  router.HandleFunc(\"/delete-photos\", DeleteAllPhoto).Methods(\"DELETE\")\n\n}\u003c/code\u003e\u003c/pre\u003e\n              \u003c/div\u003e\n            \u003c/div\u003e\n          \u003c/div\u003e\n        \u003c/article\u003e\n\u003c!-- Talk More on Context --\u003e\n\n\n    \u003c/section\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript src=\"path/to/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"path/to/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript\u003e\n      hljs.highlightAll();\n    \u003c/script\u003e\n    \u003cscript\u003e\n      hljs.initLineNumbersOnLoad();\n    \u003c/script\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n",
    "category": "golang",
    "date": "August 3, 2024",
    "img": "https://www.zdnet.com/a/img/resize/b20b27dc9865387a43765c62cf143e568e253844/2020/07/01/15682b00-63d3-4e6e-979e-3fcd983ba16f/mongodb.png?auto=webp\u0026width=1280",
    "imgalt": "cover image",
    "imgsource": "zdnet.com",
    "number": 3,
    "readduration": "30",
    "smallbody": "Covers how to perform various API - CRUD operations on a mongodb database using the mongodb golang driver.",
    "tags": ["mongodb", "database", "backend"],
    "title": "CRUD Operations With Mongodb Golang Driver",
    "views": 3
  },
  {
    "_id": "66e9de543c14661b52cb7afb",
    "body": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\"\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\"\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin\u003e\n    \u003clink href=\"https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700\u0026display=swap\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\"\u003e\n    \u003clink href=\"https://fonts.googleapis.com/css2?family=Questrial\u0026display=swap\" rel=\"stylesheet\"\u003e\n    \u003clink href=\"https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900\u0026display=swap\" rel=\"stylesheet\"\u003e\n    \u003clink rel=\"stylesheet\" href=\"path/to/font-awesome/css/font-awesome.min.css\"\u003e\n    \u003clink\n    rel=\"stylesheet\"\n    href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/styles/monokai.min.css\"\n  /\u003e\n    \u003clink rel=\"stylesheet\" href=\"./style.css\"\u003e\n    \u003ctitle\u003eTCP/IP Networking Model\u003c/title\u003e\n\u003c/head\u003e\n\u003cstyle\u003e\n    .hljs {\n      background-color: transparent;\n    }\n\n    .hljs-ln-n {\n      padding-right: 1rem;\n    }\n  \u003c/style\u003e\n\u003cbody\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \u003csection class=\"container\" style=\"max-width: 750px; margin: 0 auto\"\u003e\n\n        \u003carticle\u003e\n            \u003cheader class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eIntroduction\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/header\u003e\n            \u003cp class=\"paragraph\"\u003eThe TCP/IP network model is referred to as a network suite. It is referred to as a suite because it consists of different networking protocols working together to transmit data packets from \u003cspan class=\"folder\"\u003ehost A\u003c/span\u003e to \u003cspan class=\"folder\"\u003ehost B\u003c/span\u003e and ensure a reliable connection between networks. These protocols are arranged in a \u003cstrong class=\"important-text\"\u003ehierarchy\u003c/strong\u003e or \u003cstrong class=\"important-text\"\u003estack\u003c/strong\u003e, where the higher-level protocols make use of the protocols beneath them. TCP/IP is the backbone protocol on which the Internet runs and a core protocol for computer networking in general.\u003c/p\u003e\n            \n            \u003cp class=\"paragraph\"\u003eSeveral competing protocol suites exist, but TCP/IP has been by far the most successful over the decades. This is because of its elegant and flexible design and the fact that it is a \u003cstrong class=\"important-text\"\u003enonproprietary\u003c/strong\u003e protocol suite (not owned or controlled exclusively by a single entity).\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eIn this article, we will break down the TCP/IP Network Model in more detail, define some key terms, and take a look at the TCP/IP layering model.\u003c/p\u003e\n        \u003c/article\u003e\n\n\n        \u003carticle\u003e\n            \u003cheader class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eDefinition of Terms\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/header\u003e\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003eTCP - Transmission Control Protocol\u003c/div\u003e\n                \u003cp class=\"paragraph\"\u003eTCP is a \u003cspan class=\"important-text\"\u003econnection-oriented\u003c/span\u003e protocol that provides reliable data transfer, error detection and correction, segmentation, and reassembly. It operates at the Transport Layer of the TCP/IP Network Model and is a core protocol in the Internet protocol suite. TCP is often compared to \u003ca class=\"blog-link\" href=\"https://www.cloudflare.com/learning/ddos/glossary/user-datagram-protocol-udp/#:~:text=The%20User%20Datagram%20Protocol%2C%20or,connection%20before%20data%20is%20transferred.\" target=\"_blank\"\u003eUDP (User Diagram Data)\u003c/a\u003e, but TCP is generally preferred in networks requiring high reliability due to its robust error-handling mechanisms.\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003eIP - Internet Protocol\u003c/div\u003e\n                \u003cp class=\"paragraph\"\u003eYou've definitely heard the term \"IP address\" before. The Internet Protocol is a core protocol for transmitting data packets because it handles the tasks of \u003cspan class=\"important-text\"\u003eaddressing and routing packets\u003c/span\u003e. Every host must have an IP address through which packets can be addressed to it and every device with an IP address is considered a host. There are currently two standard versions of the Internet Protocol: IPv4 and IPv6. (\u003ca class=\"blog-link\" href=\"https://www.simplilearn.com/tutorials/cyber-security-tutorial/difference-between-ipv4-and-ipv6#:~:text=IPv4%20is%20composed%20of%2032,the%20Internet%20Protocol%20(IP).\" target=\"_blank\"\u003eRead more about IP here\u003c/a\u003e)\u003c/p\u003e\n            \u003c/div\u003e\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003ePackets\u003c/div\u003e\n                \u003cp class=\"paragraph\"\u003eThe term \"packets\" is used in various places in this article. It simply refers to small units of data. When transmitting data, large data sets are broken down into packets to meet the \u003cspan class=\"important-text\"\u003eMaximum Transfer Unit (MTU)\u003c/span\u003e of a particular network. Each packet is framed with a \u003cspan class=\"important-text\"\u003eheader\u003c/span\u003e, which consists of its addressing information such as its source IP address and destination IP address.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/article\u003e\n\n\n        \u003carticle id=\"Practical-Look-at-the-TCP/IP-Networking-Model\"\u003e\n            \u003cheader class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eA Practical Look at the TCP/IP Networking Model\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/header\u003e\n            \u003cp class=\"paragraph\"\u003eIn this section we'll take a shallow look at an instance of a Computer Network in action to better understand the role of the TCP/IP network model.\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eAssuming you have two laptops and need to transfer some files from \u003cspan class=\"folder\"\u003eLaptop A\u003c/span\u003e to \u003cspan class=\"folder\"\u003eLaptop B\u003c/span\u003e, you'll be presented with a couple of options (both wired and wireless). Let's assume you choose an Ethernet cable for the transfer. Modern systems have streamlined the data transfer process, making much of it opaque to the user. In this chapter, we'll delve deeper into the process of your files traveling from \u003cspan class=\"folder\"\u003eLaptop A\u003c/span\u003e to \u003cspan class=\"folder\"\u003eLaptop B\u003c/span\u003e.\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eAfter plugging each end of the Ethernet cable into both laptops, the next step is to assign each laptop an IP address within the same network range. For example, \u003cspan class=\"folder\"\u003eLaptop A\u003c/span\u003e could be assigned \u003cspan class=\"folder\"\u003e10.10.10.1\u003c/span\u003e, while \u003cspan class=\"folder\"\u003eLaptop B\u003c/span\u003e would be assigned \u003cspan class=\"folder\"\u003e10.10.10.2\u003c/span\u003e. This creates a private IP address range through which both laptops can transfer data addressed to each other's IP addresses. Each laptop automatically learns the other's IP address via an \u003ca class=\"blog-link\" href=\"https://en.wikipedia.org/wiki/Address_Resolution_Protocol\" target=\"_blank\"\u003eARP (Address Resolution Protocol)\u003c/a\u003e request,\n               and a connection is then established.\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eWhen you transfer files from \u003cspan class=\"folder\"\u003eLaptop A\u003c/span\u003e, addressed to \u003cspan class=\"folder\"\u003eLaptop B's\u003c/span\u003e IP address, the data passes through a series of \u003cspan class=\"important-text\"\u003eTCP network layers\u003c/span\u003e to reach its destination. Let's delve into these layers and see their role in data transmission.\u003c/p\u003e\n        \u003c/article\u003e\n\n\n        \u003carticle\u003e\n            \u003cheader class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eThe TCP/IP Network Layers\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/header\u003e\n            \u003cp class=\"paragraph\"\u003eThe TCP/IP network model conventionally consists of four(4) distinct network layers: \u003cspan class=\"folder\"\u003eApplication layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eTransport layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eNetwork layer\u003c/span\u003e, and\u003cspan class=\"folder\"\u003eLink layer\u003c/span\u003e. It's a simplified version of the original \u003cspan class=\"important-text\"\u003eOSI (Open Systems Interconnection) network model\u003c/span\u003e, which consists of seven(7) layers: \u003cspan class=\"folder\"\u003eApplication layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003ePresentation layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eSession layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eTransport layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eNetwork layer\u003c/span\u003e, \u003cspan class=\"folder\"\u003eData link layer\u003c/span\u003e, and \u003cspan class=\"folder\"\u003ePhysical layer\u003c/span\u003e. The TCP/IP layer model combines some layers from the OSI model for simplification. Let's explore the four layers of the TCP/IP Network Model:\u003c/p\u003e\n\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003e1. Link Layer\u003c/div\u003e\n                \u003cp class=\"paragraph\" style=\"margin-bottom: 1rem;\"\u003eThis layer is also known as the Network Interface Layer or Network Access Layer. It's responsible for framing and transmitting data bits over a physical medium. This can be transmitted wirelessly via electromagnetic waves or physically via wired signals. Examples of physical components include cables, optical fibers, radio waves, etc. In our practical example from the previous section \u0026lt; \u003ca class=\"blog-link\" href=\"#Practical-Look-at-the-TCP/IP-Networking-Model\"\u003ePractical Look at the TCP/IP Networking Model\u003c/a\u003e \u0026gt;, this would be the Ethernet cable used to connect the two computers.\u003c/p\u003e\n                \u003cp class=\"paragraph\" style=\"margin-bottom: 0rem;\"\u003eFraming and Transmission is handle by two separate components of the Link layer:\u003c/p\u003e\n                \u003cul class=\"paragraph-ul\"\u003e\n                    \u003cli\u003eLink Layer Control - Handles framing the packets\u003c/li\u003e\n                    \u003cli\u003eMedia Access Control - Handles transmitting the packet to physical components.\u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/div\u003e\n\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003e2. Network or Internet Layer\u003c/div\u003e\n                \u003cp class=\"paragraph\" style=\"margin-bottom: 1rem;\"\u003eThis layer consists of protocols responsible for the logical transmission of data over a network. Examples of these protocols include: Internet Protocol (IP), Internet Control Message Protocol (ICMP), and Address Resolution Protocol (ARP). Each of these protocols plays a specific role in transmitting data.\u003c/p\u003e\n                \u003cp class=\"paragraph\" style=\"margin-bottom: 1rem;\"\u003eIn our practical example from the previous section \u0026lt; \u003ca class=\"blog-link\" href=\"#Practical-Look-at-the-TCP/IP-Networking-Model\"\u003ePractical Look at the TCP/IP Networking Model\u003c/a\u003e \u0026gt;, we assigned different but similar IP addresses to each laptop. The similarity (10.10.10.x) indicates that they belong to the same subnet. As \u003cspan class=\"folder\"\u003eLaptop A\u003c/span\u003e transmits a data packet to \u003cspan class=\"folder\"\u003eLaptop B\u003c/span\u003e, the packet will be framed in \u003cspan class=\"folder\"\u003eLaptop A's\u003c/span\u003e Link Layer Control. The frame will contain \u003cspan class=\"folder\"\u003eLaptop B's\u003c/span\u003e IP address as the destination.\u003c/p\u003e\n                \u003cp class=\"paragraph\"\u003eIf there were more than two laptops connected to the network, communication would be impossible without IP addresses. IP addresses are essential for each laptop to know how to send files to others within the network.\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003e3. Transport Layer\u003c/div\u003e\n                \u003cp class=\"paragraph\"\u003eThis layer consists of protocols that provide reliable data transfer from one host in a network to the endpoint or receiving host of the network. It is concerned with end-to-end communication. TCP, UDP, and SCTP (Stream Control Transmission Protocol) are examples of Transport layer protocols.\u003c/p\u003e\n\n                \u003cp class=\"paragraph\"\u003eEnd-to-end communication means sender-to-receiver communication. In our practical example from the previous section \u0026lt; \u003ca class=\"blog-link\" href=\"#Practical-Look-at-the-TCP/IP-Networking-Model\"\u003ePractical Look at the TCP/IP Networking Model\u003c/a\u003e \u0026gt;, we looked at a very simple network topology involving only two devices. In the Internet or a more complex network topology, data does not always travel directly from one host to another. It usually hops through a series of routes before reaching its destination host.\u003c/p\u003e\n\n                \u003cp class=\"paragraph\"\u003eCommunication between one route and the next route is referred to as \u003cspan class=\"important-text\"\u003ehop-to-hop\u003c/span\u003e communication while the overall communication between the source host and destination host is the \u003cspan class=\"important-text\"\u003eend-to-end\u003c/span\u003e communication.\u003c/p\u003e\n                \n                \u003cp class=\"paragraph\"\u003eAs packets travel through these complex topologies, they are always aware of their next hop through a Layer 2 header using a \u003cspan class=\"important-text\"\u003eMAC (Media Access Control)\u003c/span\u003e address and their destination host through a Layer 3 header using an IP address. Every IOT device is assigned a unique MAC address at the time of manufacture.\u003c/p\u003e\n            \u003c/div\u003e\n\n            \u003cdiv\u003e\n                \u003cdiv class=\"sub-header\"\u003e4. Application Layer\u003c/div\u003e\n                \u003cp class=\"paragraph\" style=\"margin-bottom: 1rem;\"\u003eThis layer combines the Session and Presentation layers from the OSI layer model. The Application layer consists of protocols that work directly with the end user's applications, providing various network services to these applications. Some Application layer protocols include SSH (Secure Shell), FTP (File Transfer Protocol), HTTP (Hypertext Transfer Protocol), DNS (Domain Name System), SNMP (Simple Network Management Protocol), and many more.\u003c/p\u003e\n            \u003c/div\u003e\n        \u003c/article\u003e\n\n\n        \u003carticle id=\"Practical-Look-at-the-TCP/IP-Networking-Model\"\u003e\n            \u003cheader class=\"header\"\u003e\n                \u003ch1 class=\"topic\"\u003eConclusion\u003c/h1\u003e\n                \u003cdiv class=\"line\"\u003e\u003c/div\u003e\n            \u003c/header\u003e\n            \u003cp class=\"paragraph\"\u003eIn this exploration of the TCP/IP Network Model, we've delved into the fundamental layers and protocols that underpin modern computer networking.\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eWe've examined how data flows through the network, starting at the Application layer and traversing the Transport, Network, and Link layers. We've also explored the roles of key protocols like TCP, IP, and ARP in ensuring reliable and efficient communication.\u003c/p\u003e\n\n            \u003cp class=\"paragraph\"\u003eBy understanding the TCP/IP model, you gain a deeper appreciation for the complex processes involved in modern computer networking. This knowledge can be valuable for troubleshooting network issues, designing network architectures, and staying informed about emerging networking technologies.\u003c/p\u003e\n        \u003c/article\u003e\n\n    \u003c/section\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.6.0/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"//cdnjs.cloudflare.com/ajax/libs/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript src=\"path/to/highlight.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"path/to/highlightjs-line-numbers.min.js\"\u003e\u003c/script\u003e\n\n    \u003cscript\u003e\n      hljs.highlightAll();\n    \u003c/script\u003e\n    \u003cscript\u003e\n      hljs.initLineNumbersOnLoad();\n    \u003c/script\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e",
    "category": "sysadmin",
    "date": "August 24, 2024",
    "img": "https://blog.equinix.com/wp-content/uploads/2023/09/AdobeStock_600358251-1024x574.jpeg",
    "imgalt": "cover img",
    "imgsource": "equinix.com",
    "number": 4,
    "readduration": "10",
    "smallbody": "Lets dive into the fundamental layers and protocols that underpin modern computer networking, the TCP/IP network layers.",
    "tags": ["networking", "cyber security"],
    "title": "TCP/IP Networking Model",
    "views": 4
  }
]
